{"version":3,"sources":["components/SearchInput.js","components/AppListingRow.js","components/AppListing.js","components/AppRecommendCol.js","components/AppRecommend.js","components/filterAppRecommend.js","components/filterAppList.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","TextInput","target","value","textChange","state","bind","assertThisInitialized","react_default","a","createElement","className","type","onChange","placeholder","PureComponent","AppListingRow","index","src","imgSource","title","AppListing","isLoading","appListingData","map","src_components_AppListingRow","label","defaultProps","AppRecommendCol","AppRecommmend","appRecommendData","src_components_AppRecommendCol","datas","filterAppRecommend","_x","_x2","_filterAppRecommend","apply","arguments","_callee","searchText","maxResults","api","regenerator_default","wrap","_context","prev","next","fetch","then","results","json","sent","feed","entry","abrupt","filter","data","toLowerCase","includes","category","attributes","term","slice","stop","components_filterAppList_filterAppRecommend","App","filteredAppList","filteredRecommend","Promise","all","filterAppList","e","src_components_SearchInput","handleSearchChange","components_AppRecommend","src_components_AppListing","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa451c55.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./SearchInput.css\";\r\n/*TODO:\r\n  1. searching the apps displayed in app listing \r\n    and recommendation section by matching the keyword\r\n  2. search keyword text field is located at the top \r\n    of the page, and remains the position even app listing is scrolled\r\n  3. app listing and recommendation section only shows the apps \r\n    whose app name, category, author or summary contains the keyword\r\n    search=>text match the json=>render the result\r\n*/\r\nclass SearchInput extends PureComponent {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      TextInput :''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  handleChange = event => {\r\n    this.setState({\r\n      TextInput : event.target.value\r\n    });\r\n    this.props.textChange(event);\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-search-input\">\r\n          <input type=\"text\" value={this.state.TextInput} onChange={this.handleChange} placeholder = \"search\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSearchInput.propTypes = {\r\n  textChange: PropTypes.func\r\n};\r\nexport default SearchInput;\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./AppListingRow.css\";\r\n\r\nclass AppListingRow extends PureComponent {\r\n  render() {\r\n    if(this.props.index%2===0){\r\n      return (\r\n        <div className=\"component-app-listing-result-row\" >\r\n        <span className=\"row-number\">{this.props.index}</span>\r\n        <img src={this.props.imgSource} className=\"even\"/>\r\n        <span className=\"app-listing-result-title\"> {this.props.title}</span>\r\n    </div>\r\n    );\r\n    }else{\r\n    return (\r\n        <div className=\"component-app-listing-result-row\" >\r\n        <span className=\"row-number\">{this.props.index}</span>\r\n        <img src={this.props.imgSource} className=\"odd\"/>\r\n        <span className=\"app-listing-result-title\"> {this.props.title}</span>\r\n    </div>\r\n    );}\r\n  }\r\n}\r\n//getting title and image source from AppListing Component\r\nAppListingRow.propTypes = {\r\n  title: PropTypes.string,\r\n  imgSource: PropTypes.string,\r\n  index : PropTypes.number\r\n};\r\nexport default AppListingRow;\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React,{PureComponent} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './AppListing.css';\r\nimport AppListingRow from './AppListingRow';\r\n\r\nclass AppListing extends PureComponent{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            isLoading:false\r\n        };\r\n    }\r\n    render(){\r\n        //render the App Listing\r\n        //let listLength = this.props.appListingData.length;\r\n        //console.log(\"listLength is \"+listLength);\r\n        return(\r\n        <div className=\"component-AppListing\">\r\n        {this.props.appListingData.map((appListingData,index)=>(\r\n            <AppListingRow\r\n            index ={index+1}\r\n            imgSource={appListingData[\"im:image\"][1].label}\r\n            title={appListingData[\"im:name\"].label}/>\r\n        ))}\r\n        </div>\r\n    );}\r\n}\r\n// getting the appListData array from App component\r\nAppListing.propTypes = {\r\n   appListData: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.array\r\n  ])\r\n}\r\nAppListing.defaultProps = {\r\n    appListingData : []\r\n    }\r\nexport default AppListing\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./AppRecommendCol.css\";\r\n\r\nclass AppRecommendCol extends PureComponent {\r\n  render() {\r\n    return (\r\n        <div className=\"component-app-recommend-result-col\">\r\n        <img src={this.props.imgSource} className=\"odd\"/>\r\n        <br/>\r\n        <span className=\"app-recommend-title\"> {this.props.title}</span>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n//getting app title and image source(icon) from AppRecommend component\r\nAppRecommendCol.propTypes = {\r\n  title: PropTypes.string,\r\n  imgSource: PropTypes.string\r\n};\r\nexport default AppRecommendCol;\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React,{PureComponent} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport AppRecommmendCol from \"./AppRecommendCol\";\r\nimport './AppRecommend.css';\r\n\r\nclass AppRecommmend extends PureComponent{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isLoading:false,\r\n        };\r\n    }\r\n    render(){\r\n        return(\r\n        <div className=\"component-AppRecommend\">\r\n        {this.props.appRecommendData.map(appRecommendData=>(\r\n            <AppRecommmendCol\r\n            imgSource={appRecommendData[\"im:image\"][2].label}\r\n            title={appRecommendData[\"im:name\"].label}/>\r\n        ))}\r\n        </div>\r\n    );}\r\n}\r\nAppRecommmend.propTypes = {\r\n  appRecommendData: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.array\r\n  ])\r\n}\r\nAppRecommmend.defaultProps = {\r\n    appRecommendData : []\r\n    }\r\nexport default AppRecommmend\r\n","\r\n   var datas=[];\r\n\r\nexport default async function filterAppRecommend(searchText, maxResults) {\r\n  //fetch data from the API\r\n    const api = await fetch(\"https://itunes.apple.com/hk/rss/topgrossingapplications/limit=10/json\")\r\n  .then(results=>results.json());\r\n      datas = api.feed.entry;\r\n      //filtering data\r\n    return datas\r\n    .filter(data => {\r\n        if(searchText===\"\"){\r\n          return true;\r\n      }\r\n      if (data[\"im:name\"].label.toLowerCase().includes(searchText.toLowerCase())||\r\n      data[\"im:artist\"].label.toLowerCase().includes(searchText.toLowerCase())||\r\n      data[\"summary\"].label.toLowerCase().includes(searchText.toLowerCase())||\r\n      data.category.attributes.label.toLowerCase().includes(searchText.toLowerCase())||\r\n      data.category.attributes.term.toLowerCase().includes(searchText.toLowerCase())\r\n        ) {\r\n        return true;\r\n      }\r\n      if (data[\"im:name\"].label.includes(searchText)||\r\n      data[\"im:artist\"].label.includes(searchText)||\r\n      data[\"summary\"].label.includes(searchText)||\r\n      data.category.attributes.label.includes(searchText)||\r\n      data.category.attributes.term.includes(searchText)\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    })\r\n    .slice(0, maxResults);\r\n    \r\n}"," //const API = \"https://itunes.apple.com/hk/rss/topfreeapplications/limit=100/json\";\r\n \r\n var datas=[];\r\n\r\n export default async function filterAppRecommend(searchText, maxResults) {\r\n     //fetch data from API\r\n     const api = await fetch(\"https://itunes.apple.com/hk/rss/topfreeapplications/limit=100/json\")\r\n   .then(results=>results.json());\r\n       datas = api.feed.entry;\r\n       \r\n       //filtering the data\r\n     return datas\r\n     .filter(data => {\r\n         if(searchText===\"\"){\r\n           return true;\r\n       }\r\n       if (data[\"im:name\"].label.toLowerCase().includes(searchText.toLowerCase())||\r\n       data[\"im:artist\"].label.toLowerCase().includes(searchText.toLowerCase())||\r\n       data[\"summary\"].label.toLowerCase().includes(searchText.toLowerCase())||\r\n       data.category.attributes.label.toLowerCase().includes(searchText.toLowerCase())||\r\n       data.category.attributes.term.toLowerCase().includes(searchText.toLowerCase())\r\n         ) {\r\n\r\n         return true;\r\n       }\r\n       if (data[\"im:name\"].label.includes(searchText)||\r\n       data[\"im:artist\"].label.includes(searchText)||\r\n       data[\"summary\"].label.includes(searchText)||\r\n       data.category.attributes.label.includes(searchText)||\r\n       data.category.attributes.term.includes(searchText)\r\n       ) {\r\n         return true;\r\n       }\r\n \r\n       return false;\r\n     })\r\n     .slice(0, maxResults);\r\n     \r\n }\r\n","import React, { Component } from 'react';\r\nimport SearchInput from './components/SearchInput';\r\nimport AppListing from './components/AppListing';\r\nimport AppRecommend from './components/AppRecommend';\r\nimport filterAppRecommend from './components/filterAppRecommend';\r\nimport filterAppList from './components/filterAppList';\r\nimport './App.css';\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //storing the filtered result\r\n      filteredAppList: [],\r\n      filteredRecommend:[]\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    const [filteredRecommend,filteredAppList] = await Promise.all([filterAppRecommend(\"\",10),filterAppList(\"\",100)]);\r\n    this.setState({ filteredRecommend });\r\n    this.setState({filteredAppList});\r\n }\r\n  async handleSearchChange(e){\r\n    const [filteredRecommend,filteredAppList] = await Promise.all([filterAppRecommend(e.target.value,10),filterAppList(e.target.value,100)]);\r\n    this.setState({filteredRecommend});\r\n    this.setState({filteredAppList});\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <div className=\"search-bar\"><SearchInput textChange={this.handleSearchChange.bind(this)} /></div>     \r\n          <div className=\"App-recommendation\">\r\n          <div className = \"App-recommendation-title\">App Recommendation</div>\r\n            <AppRecommend appRecommendData={this.state.filteredRecommend}/>\r\n          </div>\r\n          <div className=\"App-Listing\">\r\n          <div className = \"App-listing-title\">Top 100 apps</div>\r\n            <AppListing appListingData={this.state.filteredAppList}/>\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}